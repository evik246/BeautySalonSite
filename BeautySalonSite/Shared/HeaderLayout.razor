@using BeautySalonSite.Models;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SalonStateContainer SalonStateContainer
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<nav class="navbar navbar-expand-lg navbar-light fixed-top bg-white shadow-sm p-1 mb-2">
    <div class="container">

        <a class="navbar-brand" href="#">
            <img src="img/logo.png" alt="" height="64"/>
        </a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mb-0 mb-lg-0 ms-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="@GetMainPageLink()" Match="NavLinkMatch.All">
                        Главная
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="counter">
                        Услуги
                    </NavLink>
                </li>
            </ul>
            @if (salons is not null && salons.Any())
            {
                <div class="mx-4">
                    <InputSelect id="select-salon" class="form-select" @bind-Value="@SalonId">
                        @if (string.IsNullOrEmpty(SalonId))
                        {
                            <option value="" selected hidden>Выберите салон</option>
                        }
                        @foreach (var salon in salons!)
                        {
                            if (!string.IsNullOrEmpty(SalonId) && salon.Id.Equals(SalonId))
                            {
                                <option selected value="@salon.Id">@salon.ToString()</option>
                            }
                            else
                            {
                                <option value="@salon.Id">@salon.ToString()</option>
                            }
                        }
                    </InputSelect>
                </div>
            }
            <div class="mb-0 mb-lg-0 ms-lg-2 d-grid gap-2 d-md-flex justify-content-md-end">
                <AuthorizeView>
                    <Authorized>
                        <a type="button" class="btn btn-warning" href="client/account">Личный кабинет</a>
                        <button @onclick="Logout" type="button" class="btn btn-warning">Выйти</button>
                    </Authorized>
                    <NotAuthorized>
                        <a type="button" class="btn btn-warning" href="login">Войти</a>
                    </NotAuthorized>
                </AuthorizeView>
                <a type="button" class="btn btn-warning" href="registration">Регистрация</a>
            </div>
        </div>
    </div>
</nav>

@code {
    private SalonWithOnlyAddress[]? salons;
    private string salonId = string.Empty;
    public string SalonId 
    { 
        get { return salonId; } 
        set { salonId = value; UpdateSalonId(); }
    }

    protected override async Task OnInitializedAsync()
    {
        salons = await Http.GetFromJsonAsync<SalonWithOnlyAddress[]>("salon");
        SalonId = SalonStateContainer.SalonId == 0 ?
            string.Empty : SalonStateContainer.SalonId.ToString();
    }

    private string GetMainPageLink()
    {
        if (string.IsNullOrEmpty(SalonId))
        {
            return "";
        }
        return "salon/" + SalonId;
    }

    private void UpdateSalonId()
    {
        var mainPageLink = GetMainPageLink();
        if (Navigation.Uri.Equals(Navigation.BaseUri + mainPageLink) ||
        Navigation.Uri.Equals(Navigation.BaseUri))
        {
            Navigation.NavigateTo(mainPageLink, forceLoad: false);
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();
        Navigation.NavigateTo(GetMainPageLink());
    }
}
