@page "/client/account/appointment/salon/{SalonId:int}/service/{ServiceId:int}/master/{MasterId:int}/datetime"

@using BeautySalonSite.Models.EmployeeModels;
@using BeautySalonSite.Models.Other;
@using BeautySalonSite.Models.SalonModels;
@using BeautySalonSite.Models.ScheduleModels;
@using BeautySalonSite.Models.ServiceModels;
@using BeautySalonSite.Service.EmployeeService;
@using BeautySalonSite.Service.SalonService;
@using BeautySalonSite.Service.ScheduleService;
@using BeautySalonSite.Service.ServiceService;
@using Microsoft.AspNetCore.Authorization;

@inject IServiceService ServiceService
@inject ISalonService SalonService
@inject IEmployeeService EmployeeService
@inject IScheduleService ScheduleService
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Client")]

<PageTitle>Выбор даты и времени записи</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Выбор даты и времени</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            @if (service != null && salon != null && master != null)
            {
                <div class="block m-2 p-4">
                    <p><b>Салон:</b> @($"{salon.ToString()}")</p>
                </div>
                <div class="block m-2 p-4">
                    <p><b>Услуга:</b> @($"{service.Name}, цена {service.Price.ToString("F2")}")</p>
                </div>
                <div class="block m-2 p-4">
                    <p><b>Мастер:</b> @($"{master.Name} {master.LastName}")</p>
                </div>
            }
        </div>
        <div class="col-md-8 order-md-2">
            @if (workingDays != null && workingDays.Length > 0)
            {
                <div class="block p-4 mb-3">
                    <h5 class="text-center mb-3">@startDate.ToString("MMMM")</h5>
                    <div class="d-flex justify-content-center align-content-center">
                        <button class="btn btn-warning bg-white border-0 mx-2" @onclick="(() => ChangeWeek(-1))">
                            <span id="boot-icon" class="bi bi-caret-left-fill" style="font-size:0.9rem"></span>
                        </button>
                        <div class="d-flex flex-row align-items-stretch">
                            @for (var date = startDate; date <= endDate; date = date.AddDays(1))
                            {
                                var isActiveDate = workingDays.Any(d => d.Date == date);
                                if (isActiveDate)
                                {
                                    var workingDay = workingDays.First(d => d.Date == date);
                                    var tempDate = date;
                                    <div class="text-center d-flex flex-column align-items-center">
                                        <button class="btn btn-warning m-1" @onclick="(() => GetAvailableSlots(tempDate))">@date.Day</button>
                                        @if (workingDay.StartTime != null && workingDay.EndTime != null)
                                        {
                                            <p class="m-0">
                                                @($"{workingDay.StartTime:HH:mm}") - @($"{workingDay.EndTime:HH:mm}")
                                            </p>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center d-flex flex-column align-items-center">
                                        <button class="btn btn-light m-1" disabled>@date.Day</button>
                                        <p class="m-0"></p>
                                    </div>
                                }
                            }
                        </div>
                        <button class="btn btn-warning bg-white border-0 mx-2" @onclick="(() => ChangeWeek(1))">
                            <span id="boot-icon" class="bi bi-caret-right-fill" style="font-size:0.9rem"></span>
                        </button>
                    </div>
                </div>
            }

            <div class="block p-4 mb-3">
                @if (slots != null && slots.Length > 0)
                {
                    <h5 class="text-center">Свободное время</h5>
                    <p class="text-center mb-4">на @selectedDate</p>
                    <div class="d-flex flex-wrap justify-content-center">
                        @foreach (var slot in slots)
                        {
                            <button class="btn btn-light m-1" @onclick="(() => SelectSlot(slot))">@($"{slot.StartTime:HH:mm}") - @($"{slot.EndTime:HH:mm}")</button>
                        }
                    </div>
                    <div class="d-flex justify-content-end mt-3">
                        <button class="btn btn-primary" @onclick="BookAppointment" disabled="@(selectedTime == null)">Записаться</button>
                    </div>
                }
                else
                {
                    <p class="text-center">Нет доступных слотов в выбранную дату</p>
                }

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int SalonId { get; set; }

    [Parameter]
    public int ServiceId { get; set; }

    [Parameter]
    public int MasterId { get; set; }

    private SalonWithOnlyAddress? salon;
    private ServiceWIthPrice? service;
    private Master? master;

    private DateOnly startDate;
    private DateOnly endDate;
    private DateOnly tempStartDate;

    private TimeOnly? selectedTime;
    private DateOnly selectedDate;

    private MasterWorkingDay[]? workingDays;
    private MasterAvailableSlot[]? slots;

    protected override async Task OnInitializedAsync()
    {
        tempStartDate = DateOnly.FromDateTime(DateTime.Today);
        SetDates();
        await SetDefaultSalon();
        await GetSalon();
        await GetService();
        await GetMaster();
        await GetMasterWorkingDays();
    }

    protected override async Task OnParametersSetAsync()
    {
        tempStartDate = DateOnly.FromDateTime(DateTime.Today);
        SetDates();
        await SetDefaultSalon();
        await GetSalon();
        await GetService();
        await GetMaster();
        await GetMasterWorkingDays();
    }

    private void SelectSlot(MasterAvailableSlot slot)
    {
        selectedTime = slot.StartTime;
    }

    private async Task BookAppointment()
    {
        // Логика для записи клиента на выбранный слот
    }

    private async Task ChangeWeek(int weekOffset)
    {
        tempStartDate = tempStartDate.AddDays(weekOffset * 7);
        SetDates();
        await GetMasterWorkingDays();
    }

    private void SetDates()
    {
        startDate = tempStartDate;
        endDate = startDate.AddDays(6);
    }

    private async Task GetAvailableSlots(DateOnly date)
    {
        selectedDate = date;
        await GetMasterWorkingDays();

        var result = await ScheduleService.GetMasterAvailableSlots(MasterId, ServiceId, selectedDate);
        if (result.State == ResultState.Success)
        {
            slots = result.Value!.ToArray();
        }
    }

    private async Task GetMasterWorkingDays()
    {
        var result = await ScheduleService.GetMasterWorkingDays(MasterId, startDate, endDate);
        if (result.State == ResultState.Success)
        {
            workingDays = result.Value!.ToArray();
        }
    }

    private async Task SetDefaultSalon()
    {
        if (SalonId <= 0)
        {
            await GetCurrentSalonId();
            Navigation.NavigateTo($"client/account/appointment/salon/{SalonId}/service/{ServiceId}/master/{MasterId}/datetime");
        }
    }

    private async Task GetCurrentSalonId()
    {
        var resultSalonId = await SalonService.GetSalonIdFromLocalStorage();
        if (resultSalonId.State == ResultState.Success)
        {
            SalonId = resultSalonId.Value!;
        }
    }

    private async Task GetSalon()
    {
        var result = await SalonService.GetSalonWithAddressById(SalonId);
        if (result.State == ResultState.Success)
        {
            salon = result.Value!;
        }
    }

    private async Task GetService()
    {
        var result = await ServiceService.GetServiceById(ServiceId);
        if (result.State == ResultState.Success)
        {
            service = result.Value!;
        }
    }

    private async Task GetMaster()
    {
        var result = await EmployeeService.GetMasterById(MasterId);
        if (result.State == ResultState.Success)
        {
            master = result.Value!;
        }
    }
}
