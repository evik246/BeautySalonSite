@page "/client/account/edit"

@using BeautySalonSite.Models.CustomerModels;
@using BeautySalonSite.Models.ErrorModels;
@using BeautySalonSite.Models.ExceptionModels;
@using BeautySalonSite.Service.CustomerService;
@using Microsoft.AspNetCore.Authorization;

@inject ICustomerService CustomerService
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Client")]

<PageTitle>Личный кабинет</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Личный кабинет</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            <div class="block m-1 p-4">
                <ClientNavMenu></ClientNavMenu>
            </div>
        </div>
        <div class="col-md-8 order-md-2">
            <div class="block m-1 p-4">

                <h4 class="mb-5">Личная информация</h4>

                @if (error is not null)
                {
                    <div class="alert alert-danger" role="alert">
                        @error.Message
                    </div>
                }

                @*Форма изменения информации клиента*@
                <div class="mt-5">
                    <EditForm Model="@customer" OnValidSubmit="@EditCustomer">
                        <DataAnnotationsValidator />

                        <div class="form-group row mt-4">
                            <label for="Name" class="col-sm-3 col-form-label"><b>Имя:</b></label>
                            <div class="col-sm-8">
                                <InputText id="Name" class="form-control" @bind-Value=customer.Name />
                                <ValidationMessage For="@(() => customer.Name)" />
                            </div>
                        </div>

                        <div class="form-group row mt-4">
                            <label for="Birthday" class="col-sm-3 col-form-label"><b>День рождения:</b></label>
                            <div class="col-sm-5">
                                <InputDate id="Birthday" class="form-control" @bind-Value=customer.Birthday />
                                <ValidationMessage For="@(() => customer.Birthday)" />
                            </div>
                        </div>

                        <div class="form-group row mt-4">
                            <label for="Email" class="col-sm-3 col-form-label"><b>Почта:</b></label>
                            <div class="col-sm-8">
                                <InputText id="Email" class="form-control" @bind-Value=customer.Email />
                                <ValidationMessage For="@(() => customer.Email)" />
                            </div>
                        </div>

                        <div class="form-group row mt-4">
                            <label for="Phone" class="col-sm-3 col-form-label"><b>Телефон:</b></label>
                            <div class="col-sm-8">
                                <InputText id="Phone" class="form-control" @bind-Value=customer.Phone />
                                <ValidationMessage For="@(() => customer.Phone)" />
                            </div>
                        </div>

                    </EditForm>
                </div>
                <div class="d-flex justify-content-end">
                    <button @onclick="EditCustomer" type="submit" class="btn btn-warning mt-5">Подтвердить изменения</button>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    private CustomerUpdate customer = new();

    private Error? error;

    private async Task EditCustomer()
    {
        var result = await CustomerService.UpdateCustomer(customer);

        if (result.State == Models.Other.ResultState.Success)
        {
            Navigation.NavigateTo("client/account");
        }

        if (result.State == Models.Other.ResultState.Failure)
        {
            if (result.Exception is NoInputContentException)
            {
                error = new() { Message = "Необходимо указать хотя бы одно значение" };
            }

            if (result.Exception is UsedEmailException)
            {
                error = new() { Message = "Эта почта уже занята" };
            }

            if (result.Exception is UsedPhoneException)
            {
                error = new() { Message = "Этот номер телефона уже занят" };
            }
        }
    }
}
