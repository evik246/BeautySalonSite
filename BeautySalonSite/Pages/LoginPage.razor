@page "/login"

@using BeautySalonSite.Models.ExceptionModels;
@using BeautySalonSite.Models.UserModels;
@using BeautySalonSite.Service.AuthService;

@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Вход в учетную запись</PageTitle>

<section>
    <div class="container">
        <div class="row">
            <div class="h-100 d-flex align-items-center justify-content-center">
                <EditForm class="block form-floating p-5 mb-4" Model="@User" OnValidSubmit="@Login">
                    <DataAnnotationsValidator />
                    <h2 class="text-center mb-5">Вход в учетную запись</h2>
                    @if (unauthorized)
                    {
                        <div class="alert alert-danger" role="alert">
                            Некорректный пароль или адрес почты
                        </div>
                    }
                    <div class="form-group mb-3">
                        <label class="col-form-label" for="Email">Почта</label>
                        <InputText id="Email" class="form-control" @bind-Value=User.Email />
                        <ValidationMessage For="@(() => User.Email)" />
                    </div>
                    <div class="form-group mb-3">
                        <label class="col-form-label" for="Password">Пароль</label>
                        <InputText type="password" id="Password" class="form-control" @bind-Value=User.Password />
                        <ValidationMessage For="@(() => User.Password)" />
                    </div>
                    <button type="submit" class="btn btn-warning col-12 mt-5 mb-3">Войти</button>
                    <p class="text-center my-2">или <a href="registration" class="link-yellow">регистрация</a></p>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    public UserLogin User { get; set; } = new();

    private string token = string.Empty;
    private bool unauthorized;

    protected async Task Login()
    {
        var result = await AuthService.Login(User);

        if (result.State == Models.Other.ResultState.Success)
        {
            var result2 = await AuthService.GetUserRole();
            if (result2.State == Models.Other.ResultState.Success)
            {
                if (result2.Value!.Equals("Client"))
                {
                    Navigation.NavigateTo("client/account", forceLoad: false);
                }

                if (result2.Value!.Equals("Master"))
                {
                    Navigation.NavigateTo("master/account", forceLoad: false);
                }

                if (result2.Value!.Equals("Manager"))
                {
                    Navigation.NavigateTo("manager/account/master", forceLoad: false);
                }
            }
        }

        if (result.State == Models.Other.ResultState.Failure)
        {
            unauthorized = result.Exception is UnauthorizedException;
        }
    }
}
