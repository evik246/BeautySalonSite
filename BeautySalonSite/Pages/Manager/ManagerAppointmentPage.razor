@page "/manager/account/appointment"
@using BeautySalonSite.Extensions;
@using BeautySalonSite.Models.AppointmentModels;
@using BeautySalonSite.Models.Other;
@using BeautySalonSite.Service.AppointmentService;
@using Microsoft.AspNetCore.Authorization;

@inject IAppointmentService AppointmentService

@attribute [Authorize(Roles = "Manager")]

<PageTitle>Личный кабинет</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Личный кабинет</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            <div class="block m-1 p-4">
                <ManagerNavMenu></ManagerNavMenu>
            </div>
        </div>
        <div class="col-md-8 order-md-2">
            <div class="m-1">
                <div class="block p-4">
                    <h4 class="mt-2">Записи</h4>
                </div>
                <div class="py-3 text-center mb-1 mt-4">
                    <h4>Записи</h4>
                </div>
                @if (appointments != null && appointments.Length > 0)
                {
                    @foreach (var appointment in appointments)
                    {
                        <div class="block mx-3 card mb-3 p-2 pb-3 pe-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <h5 class="card-title mb-4"><b>Дата:</b> @appointment.Date.ToShortDateString()</h5>
                                    <h5 class="card-title"><b>Время:</b> @appointment.Date.ToShortTimeString()</h5>
                                </div>

                                <p class="card-text mt-4"><b>Мастер:</b> @appointment.Master.ToString()</p>
                                <p class="card-text"><b>Клиент:</b> @appointment.Customer.Name</p>
                                <p class="card-text"><b>Услуга:</b> @appointment.Service.Name</p>
                                <p class="card-text"><b>Цена:</b> @appointment.Price</p>
                                <p class="card-text"><b>Статус:</b> @appointment.Status.GetDescription()</p>
                            </div>
                            <div class="d-flex justify-content-end">
                                <a class="btn btn-warning mt-1">Посмотреть</a>
                            </div>
                        </div>
                    }

                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(paging.PageNumber == 1 ? "disabled" : "")">
                                <a class="btn-warning link-dark page-link" @onclick="PreviousPage">Предыдущая</a>
                            </li>
                            <li class="page-item mx-4">
                                <a class="bg-warning border-warning text-black page-link">@paging.PageNumber</a>
                            </li>
                            <li class="page-item @(hasNextPage ? "" : "disabled")">
                                <a class="btn-warning link-dark page-link" @onclick="NextPage">Следующая</a>
                            </li>
                        </ul>
                    </nav>

                }
                else
                {
                    <p class="text-center">Нет записей.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Paging paging = new() { PageSize = 15 };
    private bool hasNextPage;

    private ManagerAppointment[]? appointments;

    protected override async Task OnInitializedAsync()
    {
        appointments = await GetAppointments();
        await HasNextPage();
    }

    private async Task<ManagerAppointment[]> GetAppointments()
    {
        var result = await AppointmentService.GetManagerAppointments(paging);
        if (result.State == ResultState.Success)
        {
            return result.Value!.ToArray();
        }
        return new ManagerAppointment[0];
    }

    private async Task PreviousPage()
    {
        if (paging.PageNumber > 1)
        {
            paging.PageNumber--;
            appointments = await GetAppointments();
        }
        await HasNextPage();
    }

    private async Task NextPage()
    {
        paging.PageNumber++;
        appointments = await GetAppointments();
        await HasNextPage();
    }

    private async Task HasNextPage()
    {
        paging.PageNumber++;
        var result = await GetAppointments();
        paging.PageNumber--;

        hasNextPage = !(result is null || !result.Any());
    }
}
