@page "/manager/account/master/{MasterId:int}"

@using BeautySalonSite.Extensions;
@using BeautySalonSite.Models.EmployeeModels;
@using BeautySalonSite.Models.ErrorModels;
@using BeautySalonSite.Models.ExceptionModels;
@using BeautySalonSite.Models.ScheduleModels;
@using BeautySalonSite.Service.EmployeeService;
@using BeautySalonSite.Service.ScheduleService;
@using Microsoft.AspNetCore.Authorization;

@inject IScheduleService ScheduleService
@inject IEmployeeService EmployeeService

@attribute [Authorize(Roles = "Manager")]

<PageTitle>Расписание мастера</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Личный кабинет</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            <div class="block m-1 p-4">
                <ManagerNavMenu></ManagerNavMenu>
            </div>
        </div>
        <div class="col-md-8 order-md-2">
            <div class="block m-1 p-4">
                @if (master is not null)
                {
                    <div class="mt-1 mb-5">
                        <div class="mb-2 d-flex justify-content-start align-content-center">
                            <div class="me-3">
                                <img src="@(master.PhotoPath == null? "/img/blank-profile.jpg" : master.PhotoPath)"
                                     class="rounded profile-photo" alt="Фотография мастера" />
                            </div>
                            <div>
                                <p>@master.ToString()</p>
                                @if (!string.IsNullOrEmpty(master.Specialization))
                                {
                                    <p>@master.Specialization</p>
                                }
                            </div>
                        </div>
                        <div>
                            <p><b>Почта:</b> @master.Email</p>
                        </div>
                    </div>
                }
                else
                {
                    <p>Не удалось загрузить данные мастера.</p>
                }

                <div class="mb-3 mt-5">
                    <h4>Расписание мастера</h4>
                </div>
                @if (schedule != null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>День недели</th>
                                <th>Время начала</th>
                                <th>Время окончания</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in schedule)
                            {
                                <tr>
                                    <td>
                                        @if (item.Id == selectedScheduleId)
                                        {
                                            <InputSelect id="WeekDay" class="form-control" @bind-Value="@scheduleChange.Weekday">
                                                <option value="Monday">Понедельник</option>
                                                <option value="Tuesday">Вторник</option>
                                                <option value="Wednesday">Среда</option>
                                                <option value="Thursday">Четверг</option>
                                                <option value="Friday">Пятница</option>
                                                <option value="Saturday">Суббота</option>
                                                <option value="Sunday">Воскресенье</option>
                                            </InputSelect>
                                        }
                                        else
                                        {
                                            @item.Weekday.GetDescription()
                                        }
                                    </td>
                                    <td>
                                        @if (item.Id == selectedScheduleId)
                                        {
                                            <input type="text" class="form-control" @bind="@scheduleChange.StartTime" />
                                        }
                                        else
                                        {
                                            @item.StartTime
                                        }
                                    </td>
                                    <td>
                                        @if (item.Id == selectedScheduleId)
                                        {
                                            <input type="text" class="form-control" @bind="@scheduleChange.EndTime" />
                                        }
                                        else
                                        {
                                            @item.EndTime
                                        }
                                    </td>
                                    <td>
                                        @if (item.Id == selectedScheduleId)
                                        {
                                            <!-- Кнопка сохранения изменений -->
                                            <button class="m-1 btn btn-success" @onclick="SaveMasterSchedule">Сохранить</button>
                                            <!-- Кнопка отмены изменений -->
                                            <button class="m-1 btn btn-secondary" @onclick="CancelEdit">Отмена</button>
                                        }
                                        else
                                        {
                                            <!-- Кнопка редактирования -->
                                            <button class="m-1 btn btn-primary" @onclick="() => ChangeMasterSchedule(item.Id)">Редактировать</button>
                                            <!-- Кнопка удаления -->
                                            <button class="m-1 btn btn-danger" @onclick="() => DeleteMasterSchedule(item.Id)">Удалить</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>Загрузка расписания...</p>
                }

                <!-- Форма для создания нового расписания мастера -->
                <EditForm Model="@scheduleCreate" OnValidSubmit="@CreateMasterSchedule">
                    <DataAnnotationsValidator />
                    <div class="mb-3 mt-5">
                        <h4>Создать новое расписание</h4>
                    </div>
                    @if (error is not null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @error.Message
                        </div>
                    }
                    <div class="form-group my-3">
                        <label for="WeekDay">День недели:</label>
                        <InputSelect id="WeekDay" class="form-control" @bind-Value="@scheduleCreate.Weekday">
                            <option value="Monday">Понедельник</option>
                            <option value="Tuesday">Вторник</option>
                            <option value="Wednesday">Среда</option>
                            <option value="Thursday">Четверг</option>
                            <option value="Friday">Пятница</option>
                            <option value="Saturday">Суббота</option>
                            <option value="Sunday">Воскресенье</option>
                        </InputSelect>
                    </div>
                    <div class="form-group my-3">
                        <label for="StartTime">Время начала:</label>
                        <input type="time" id="StartTime" class="form-control" @bind=scheduleCreate.StartTime />
                        <ValidationMessage For="@(() => scheduleCreate.StartTime)" />
                    </div>
                    <div class="form-group my-2">
                        <label for="EndTime">Время окончания:</label>
                        <input type="time" class="form-control" id="EndTime" @bind=scheduleCreate.EndTime />
                        <ValidationMessage For="@(() => scheduleCreate.EndTime)" />
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-warning mt-1">Добавить</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int MasterId { get; set; }

    private MasterSchedule[]? schedule;
    private MasterWithEmail? master;

    private int selectedScheduleId;
    private MasterScheduleChange scheduleChange = new();
    private MasterScheduleCreate scheduleCreate = new();

    private Error? error;

    protected override async Task OnInitializedAsync()
    {
        if (MasterId > 0)
        {
            await GetMaster();
            await GetMasterSchedule();
        }
    }

    private async Task DeleteMasterSchedule(int scheduleId)
    {
        var result = await ScheduleService.DeleteManagerMasterSchedule(scheduleId);
        if (result.State == Models.Other.ResultState.Success)
        {
            await GetMasterSchedule();
        }
    }

    private void ChangeMasterSchedule(int scheduleId)
    {
        selectedScheduleId = scheduleId;

        // Загрузка выбранного расписания в scheduleChange
        var selectedSchedule = schedule!.FirstOrDefault(s => s.Id == selectedScheduleId);
        if (selectedSchedule != null)
        {
            scheduleChange.StartTime = selectedSchedule.StartTime;
            scheduleChange.EndTime = selectedSchedule.EndTime;
        }
    }

    private async Task SaveMasterSchedule()
    {
        var result = await ScheduleService.ChangeManagerMasterSchedule(selectedScheduleId, scheduleChange);
        if (result.State == Models.Other.ResultState.Success)
        {
            selectedScheduleId = 0; // Сброс выбранного расписания
            scheduleChange = new MasterScheduleChange(); // Сброс полей ввода
            await GetMasterSchedule();
        }

        if (result.State == Models.Other.ResultState.Failure)
        {
            if (result.Exception is OutOfTimeLimitException)
            {
                error = new() { Message = "Количество часов работы превышает 8 часов." };
            }
        }
    }

    private void CancelEdit()
    {
        error = null;
        selectedScheduleId = 0; // Сброс выбранного расписания
        scheduleChange = new MasterScheduleChange(); // Сброс полей ввода
    }

    private async Task CreateMasterSchedule()
    {
        var result = await ScheduleService.CreateManagerMasterSchedule(MasterId, scheduleCreate);
        if (result.State == Models.Other.ResultState.Success)
        {
            await GetMasterSchedule();
        }

        if (result.State == Models.Other.ResultState.Failure)
        {
            if (result.Exception is OutOfTimeLimitException)
            {
                error = new() { Message = "Количество часов работы превышает 8 часов." };
            }
        }
    }

    private async Task GetMasterSchedule()
    {
        error = null;
        var result = await ScheduleService.GetManagerMasterSchedule(MasterId);
        if (result.State == Models.Other.ResultState.Success)
        {
            schedule = result.Value!.ToArray();
        }
    }

    private async Task GetMaster()
    {
        var result = await EmployeeService.GetManagerMasterById(MasterId);
        if (result.State == Models.Other.ResultState.Success)
        {
            master = result.Value!;
        }
    }
}
