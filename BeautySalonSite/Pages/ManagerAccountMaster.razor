@page "/manager/account/master"

@using BeautySalonSite.Models.CategoryModels;
@using BeautySalonSite.Models.EmployeeModels;
@using BeautySalonSite.Models.Other;
@using BeautySalonSite.Models.ServiceModels;
@using BeautySalonSite.Service.CategoryService;
@using BeautySalonSite.Service.EmployeeService;
@using BeautySalonSite.Service.ServiceService;
@using Microsoft.AspNetCore.Authorization;

@inject IEmployeeService EmployeeService
@inject IServiceService ServiceService
@inject ICategoryService CategoryService

@attribute [Authorize(Roles = "Manager")]

<PageTitle>Личный кабинет</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Личный кабинет</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            <div class="block m-1 p-4">
                <ManagerNavMenu></ManagerNavMenu>
            </div>
        </div>
        <div class="col-md-8 order-md-2">
            <div class="block m-1 p-4">
                <div class="mb-2 mt-2">
                    <h4 class="pb-3 my-1 px-2">Мои мастера</h4>
                    @if (categories != null && categories.Length > 0)
                    {
                        <div class="d-flex justify-content-between mb-3">
                            <div class="col-md-4">
                                <select class="form-select" @onchange="OnCategoryChange">
                                    <option value="0">Все категории</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" @onchange="OnServiceChange" disabled="@(!servicesLoaded)">
                                    <option value="0">Все услуги</option>
                                    @if (services != null && services.Length > 0)
                                    {
                                        @foreach (var service in services)
                                        {
                                            <option value="@service.Id">@service.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="py-3 text-center mb-1 mt-4">
                <h4>Мастера</h4>
            </div>
            @if (masters != null && masters.Length > 0)
            {
                @foreach (var master in masters)
                {
                    <div class="block mx-3 mb-3 p-3 pb-3 pe-4">
                        <div class="mb-3 d-flex justify-content-start align-content-center">
                            <div class="me-3">
                                <img src="@(master.PhotoPath == null? "/img/blank-profile.jpg" : master.PhotoPath)"
                                     class="rounded profile-photo" alt="Фотография мастера" />
                            </div>
                            <div>
                                <p>@master.ToString()</p>
                                @if (!string.IsNullOrEmpty(master.Specialization))
                                {
                                    <p>@master.Specialization</p>
                                }
                            </div>
                        </div>
                        <div>
                            <p><b>Почта:</b> @master.Email</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center">@GetNoMastersMessage()</p>
            }
        </div>
    </div>
</div>

@code {
    private Paging paging = new() { PageSize = 20 };

    private MasterWithEmail[]? masters;
    private ServiceWithoutCategory[]? services;
    private Category[]? categories;

    private bool servicesLoaded = false;

    public int ServiceId { get; set; }

    public int CategoryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        await GetMasters();
    }

    private async Task GetCategories()
    {
        var result = await CategoryService.GetManagerCategories();
        if (result.State == ResultState.Success)
        {
            categories = result.Value!.ToArray();
        }
    }

    private async Task GetServices()
    {
        var result = await ServiceService.GetManagerServicesByCategory(CategoryId, new Paging());
        if (result.State == ResultState.Success)
        {
            services = result.Value!.ToArray();
            servicesLoaded = true;
        }
        else
        {
            services = null;
        }
    }

    private async Task GetMasters()
    {
        if (ServiceId > 0)
        {
            await GetMastersByService();
        }
        else if (CategoryId > 0)
        {
            await GetMastersByCategory();
        }
        else
        {
            var result = await EmployeeService.GetManagerMasters(paging);
            if (result.State == ResultState.Success)
            {
                masters = result.Value!.ToArray();
            }
        }
    }

    private async Task GetMastersByService()
    {
        var result = await EmployeeService.GetManagerMastersByService(ServiceId, paging);
        if (result.State == ResultState.Success)
        {
            masters = result.Value!.ToArray();
        }
    }

    private async Task GetMastersByCategory()
    {
        var result = await EmployeeService.GetManagerMastersByServiceCategory(CategoryId, paging);
        if (result.State == ResultState.Success)
        {
            masters = result.Value!.ToArray();
        }
    }

    private async Task OnCategoryChange(ChangeEventArgs e)
    {
        CategoryId = int.Parse(e.Value!.ToString()!);
        ServiceId = 0;
        servicesLoaded = false;
        if (CategoryId > 0)
        {
            await GetServices();
            await GetMastersByCategory();
        }
        else
        {
            await GetMasters();
        }
    }

    private async Task OnServiceChange(ChangeEventArgs e)
    {
        ServiceId = int.Parse(e.Value!.ToString()!);
        if (ServiceId > 0)
        {
            await GetMastersByService();
        }
        else
        {
            await GetMasters();
        }
    }

    private string GetNoMastersMessage()
    {
        if (ServiceId > 0)
        {
            return "Нет мастеров, предоставляющих данную услугу.";
        }
        else if (CategoryId > 0)
        {
            return "Нет мастеров в выбранной категории.";
        }
        else
        {
            return "Нет доступных мастеров.";
        }
    }
}
