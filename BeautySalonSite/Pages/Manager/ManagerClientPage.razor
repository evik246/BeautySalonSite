@page "/manager/account/client"

@using BeautySalonSite.Models.CustomerModels;
@using BeautySalonSite.Models.Other;
@using BeautySalonSite.Service.CustomerService;
@using Microsoft.AspNetCore.Authorization;

@inject ICustomerService CustomerService

@attribute [Authorize(Roles = "Manager")]

<PageTitle>Личный кабинет</PageTitle>

<div class="container">
    <div class="py-5">
        <h2>Личный кабинет</h2>
    </div>
    <div class="row">
        <div class="col-md-4 order-md-1 mb-4">
            <div class="block m-1 p-4">
                <ManagerNavMenu></ManagerNavMenu>
            </div>
        </div>
        <div class="col-md-8 order-md-2">
            <div class="block m-1 p-4">
                <div class="mb-2 mt-2">
                    <h4 class="pb-3 my-1 px-2">Клиенты</h4>
                </div>
            </div>
            @if (customers != null && customers.Length > 0)
            {
                @foreach (var customer in customers)
                {
                    var tempId = customer.Id;

                    <div class="block m-1 my-4 p-4">
                        <div>
                            <p><b>Имя:</b> @customer?.Name</p>
                            @if (customer?.Birthday is null)
                            {
                                <p><b>Дата рождения:</b> не указана</p>
                            }
                            else
                            {
                                <p><b>Дата рождения:</b> @customer?.Birthday?.ToString("dd.MM.yyyy")</p>
                            }
                            <p><b>Email:</b> @customer?.Email</p>
                            <p><b>Телефон:</b> @customer?.Phone</p>
                        </div>
                        <div class="d-flex justify-content-end">
                            <a href="@($"manager/account/client/{tempId}")" class="btn btn-warning mt-1">Информация</a>
                        </div>
                    </div>
                }

                <nav>
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(paging.PageNumber == 1 ? "disabled" : "")">
                            <a class="btn-warning link-dark page-link" @onclick="PreviousPage">Предыдущая</a>
                        </li>
                        <li class="page-item mx-4">
                            <a class="bg-warning border-warning text-black page-link">@paging.PageNumber</a>
                        </li>
                        <li class="page-item @(hasNextPage ? "" : "disabled")">
                            <a class="btn-warning link-dark page-link" @onclick="NextPage">Следующая</a>
                        </li>
                    </ul>
                </nav>
            }
            else
            {
                <p class="text-center">Нет клиентов.</p>
            }
        </div>
    </div>
</div>

@code {
    private Paging paging = new() { PageSize = 15 };
    private bool hasNextPage;

    private FullCustomer[]? customers;

    protected override async Task OnInitializedAsync()
    {
        customers = await GetAllCustomers();
        await HasNextPage();
    }

    private async Task<FullCustomer[]> GetAllCustomers()
    {
        var result = await CustomerService.GetAllCustomers(paging);
        if (result.State == ResultState.Success)
        {
            return result.Value!.ToArray();
        }
        return new FullCustomer[0];
    }

    private async Task PreviousPage()
    {
        if (paging.PageNumber > 1)
        {
            paging.PageNumber--;
            customers = await GetAllCustomers();
        }
        await HasNextPage();
    }

    private async Task NextPage()
    {
        paging.PageNumber++;
        customers = await GetAllCustomers();
        await HasNextPage();
    }

    private async Task HasNextPage()
    {
        paging.PageNumber++;
        var result = await GetAllCustomers();
        paging.PageNumber--;

        hasNextPage = !(result is null || !result.Any());
    }
}
