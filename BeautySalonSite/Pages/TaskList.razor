@page "/tasklist"
@using System.ComponentModel.DataAnnotations;

<h3>TaskList</h3>

@if (list.Count > 0)
{
    <div class="progress my-2">
        <div class="progress-bar" role="progressbar" 
            style="width: @(percentDone)%"
            aria-valuemin="0"
            aria-valuemax="100">
            @(percentDone)%
        </div>
    </div>
}

<EditForm class="d-inline my-2" Model="@newTask" OnValidSubmit="AddTask">
    <InputText class="form-control mx-2" @bind-Value="newTask.Task" />
    <button class="btn btn-outline-primary" type="submit">Add Task</button>
</EditForm>

<ul class="list-group">
    @foreach (var task in list)
    {
        @if (task.IsComplete)
        {
            <li class="list-group-item list-group-item-secondary my-1" @onclick="(() => task.IsComplete = !task.IsComplete)">
                <del>@task.Task</del>
            </li>
        }
        else
        {
            <li class="list-group-item list-group-item-success my-1" @onclick="(() => task.IsComplete = !task.IsComplete)">
                @task.Task
            </li>
        }
    }
</ul>

@code {
    private List<TaskModel> list = new();
    private TaskModelInput newTask = new();

    private int percentDone
    {
        get
        {
            return (list.Count(x => x.IsComplete) * 100) / list.Count;
        }
    }

    private void AddTask()
    {
        TaskModel task = new()
        {
            Task = newTask.Task
        };
        list.Add(task);
        newTask = new();
    }

    public class TaskModelInput
    {
        [EditorRequired]
        [Required(ErrorMessage = "Task name is required")]
        public string Task { get; set; } = string.Empty;
        public bool IsComplete { get; set; }
    }

    public class TaskModel
    {
        public string Task { get; set; } = string.Empty;
        public bool IsComplete { get; set; }
    }
}
