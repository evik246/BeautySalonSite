@using BeautySalonSite.Models.SalonModels
@using BeautySalonSite.Service.AuthService;
@using BeautySalonSite.Service.SalonService;

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ISalonService SalonService

<nav class="navbar navbar-expand-lg navbar-light fixed-top bg-white shadow-sm p-1 mb-2">
    <div class="container">

        <a class="navbar-brand" href="#">
            <img src="img/logo.png" alt="" height="64" />
        </a>

        @if (salons is not null && salons.Any())
        {
            <div class="m-1">
                <InputSelect id="select-salon" class="form-select" @bind-Value="@SalonId">
                    @if (string.IsNullOrEmpty(SalonId))
                    {
                        <option value="" selected hidden>Выберите салон</option>
                    }
                    @foreach (var salon in salons!)
                    {
                        if (!string.IsNullOrEmpty(SalonId) && salon.Id.Equals(SalonId))
                        {
                            <option selected value="@salon.Id">@salon.ToString()</option>
                        }
                        else
                        {
                            <option value="@salon.Id">@salon.ToString()</option>
                        }
                    }
                </InputSelect>
            </div>
        }

        <button @onclick="ToggleNavMenu" class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div @onclick="ToggleNavMenu" class="@NavMenuCssClass navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item m-1">
                    <NavLink class="nav-link" href="@GetMainPageLink()" Match="NavLinkMatch.All">
                        Главная
                    </NavLink>
                </li>
                <li class="nav-item m-1">
                    <NavLink class="nav-link" href="@($"salon/{SalonId}/service")">
                        Услуги
                    </NavLink>
                </li>
                <li class="nav-item m-1">
                    <NavLink class="nav-link" href="master">
                        Специалисты
                    </NavLink>
                </li>
                
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item m-1">
                            <NavLink class="nav-link" href="client/account">
                                Личный кабинет
                            </NavLink>
                        </li>
                        <li class="nav-item m-1">
                            <NavLink class="btn btn-warning" @onclick="Logout">
                                Выйти
                            </NavLink>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item m-1">
                            <NavLink class="btn btn-warning" href="login">
                                Войти
                            </NavLink>
                        </li>
                        <li class="nav-item m-1">
                            <NavLink class="btn btn-warning" href="registration">
                                Регистрация
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {
    private SalonWithOnlyAddress[]? salons;
    private string salonId = string.Empty;
    public string SalonId 
    { 
        get { return salonId; } 
        set { salonId = value; UpdateSalonId(); }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await SalonService.GetSalonsWithAddress();
        if (result.State == Models.Other.ResultState.Success)
        {
            salons = result.Value!.ToArray();
        }

        var result2 = await SalonService.GetSalonIdFromLocalStorage();
        if (result2.State == Models.Other.ResultState.Success)
        {
            salonId = result2.Value!.ToString();
        }
    }

    private string GetMainPageLink()
    {
        if (string.IsNullOrEmpty(SalonId))
        {
            return "";
        }
        return "salon/" + SalonId;
    }

    private async void UpdateSalonId()
    {
        if (int.TryParse(SalonId, out int id))
        {
            await SalonService.SetSalonIdInLocalStorage(id);
        }
        else
        {
            await SalonService.RemoveSalonIdFromLocalStorage();
        }

        var mainPageLink = GetMainPageLink();
        if (Navigation.Uri.Equals(Navigation.BaseUri + mainPageLink) ||
            Navigation.Uri.Equals(Navigation.BaseUri))
        {
            Navigation.NavigateTo(mainPageLink);
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        Navigation.NavigateTo(GetMainPageLink());
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
